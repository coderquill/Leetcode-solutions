//https://leetcode.com/problems/longest-substring-without-repeating-characters/

int max(int a, int b)
    {
        return (a > b) ? a : b;
    }
    
    int lengthOfLongestSubstring(string s)
    {
        // Slide over the string and add each char to a map as key and its pos as value
        // Check if the char is already present in the map and if yes then start sliding from there
        
        unordered_map<char, int> mp;
        int i = 0, j = 0, ans = 0;
        int len = s.length();
        
        for (i = 0, j = 0; j < len; j++)
        {
            if (mp.find(s[j]) != mp.end())
            {
                i = max(i, mp[s[j]]);
            }
            
            ans = max(ans, j - i + 1);
            mp[s[j]] = j + 1; // this is the position of the char in terms of len
        }
        
        return ans;
    }
